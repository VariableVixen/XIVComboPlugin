using System;
using System.Diagnostics;

using Dalamud.Plugin.Services;

namespace VariableVixen.XIVComboVX;

internal class SingleTickLogger: IDisposable {
	public const string STACK_TRACE_MSG = "autogenerated stack trace exception";
	private bool disposed;

	public bool Enabled { get; protected set; } = false;
	public bool EnabledNextTick { get; protected set; } = false;

	internal SingleTickLogger() => Service.Framework.Update += this.onTick;

	public void EnableNextTick() {
		this.EnabledNextTick = true;
		Service.Log.Information($"{LogTag.SingleTick} Enabled logging snapshot for next tick");
	}

	private void onTick(IFramework framework) {
		if (this.Enabled)
			Service.Log.Information($"{LogTag.SingleTick} Logging snapshot complete");
		if (this.EnabledNextTick)
			Service.Log.Information($"{LogTag.SingleTick} Beginning logging snapshot");
		this.Enabled = this.EnabledNextTick;
		this.EnabledNextTick = false;
	}

	internal void Fatal(string msg, Exception? cause = null) {
		if (this.Enabled)
			Service.Log.Fatal($"{msg}\n{cause ?? new Exception(STACK_TRACE_MSG)}");
	}
	internal void Error(string msg, Exception? cause = null) {
		if (this.Enabled)
			Service.Log.Error($"{msg}\n{cause ?? new Exception(STACK_TRACE_MSG)}");
	}
	internal void Warning(string msg, Exception? cause = null) {
		if (this.Enabled)
			Service.Log.Warning($"{msg}\n{cause ?? new Exception(STACK_TRACE_MSG)}");
	}
	[Conditional("DEBUG")]
	internal void Debug(string msg) {
		if (this.Enabled)
			Service.Log.Information(msg);
	}
	[Conditional("DEBUG")]
	internal void Trace(string msg) {
		if (this.Enabled) {
			Service.Log.Information(
#if TRACE
				$"{msg}\n{new StackTrace(true)}"
#else
				msg
#endif
			);
		}
	}

	#region IDisposable

	public void Dispose() {
		if (this.disposed)
			return;
		this.disposed = true;

		Service.Framework.Update -= this.onTick;
	}

	#endregion

}
